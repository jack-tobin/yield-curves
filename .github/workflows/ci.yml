name: CI/CD Pipeline

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for commitizen

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install UV
        uses: astral-sh/setup-uv@v2

      - name: Install dependencies
        run: |
          uv sync --all-extras --dev

      - name: Run Ruff linter
        run: |
          uv run ruff check .
          uv run ruff format --check .

  version-bump:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    needs: [validate]
    outputs:
      new_version: ${{ steps.bump.outputs.version }}
      version_bumped: ${{ steps.bump.outputs.version_bumped }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install UV
        uses: astral-sh/setup-uv@v2

      - name: Install commitizen
        run: uv tool install commitizen

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Bump version with commitizen
        id: bump
        run: |
          if uv tool run cz bump --dry-run --yes 2>/dev/null; then
            echo "Version bump needed"
            NEW_VERSION=$(uv tool run cz bump --dry-run --yes | grep "tag to create" | awk '{print $NF}')
            uv tool run cz bump --yes
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "version_bumped=true" >> $GITHUB_OUTPUT
            git push --follow-tags
          else
            echo "No version bump needed"
            echo "version_bumped=false" >> $GITHUB_OUTPUT
          fi

  build-and-test:
    runs-on: ubuntu-latest
    needs: [validate]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: yield-curves:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run unit tests in Docker container
        run: |
          docker run --rm \
            -v ${{ github.workspace }}/test-results:/app/test-results \
            yield-curves:latest \
            sh -c "uv run pytest tests/ --junitxml=/app/test-results/pytest.xml --cov --cov-report=xml:/app/test-results/coverage.xml"

      - name: Run Django tests in Docker container
        run: |
          docker run --rm \
            -v ${{ github.workspace }}/test-results:/app/test-results \
            -e DJANGO_SETTINGS_MODULE=myproject.settings.test \
            yield-curves:latest \
            sh -c "uv run python manage.py test django_tests --keepdb --parallel --debug-mode"

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: test-results/

      - name: Build and push to GitHub Container Registry
        if: github.event_name == 'push'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: [build-and-test, version-bump]
  #   if: github.ref == 'refs/heads/master' && github.event_name == 'push'
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Deploy to Render
  #       uses: johnbeynon/render-deploy-action@v0.0.8
  #       with:
  #         service-id: ${{ secrets.RENDER_SERVICE_ID }}
  #         api-key: ${{ secrets.RENDER_API_KEY }}

  # notify:
  #   runs-on: ubuntu-latest
  #   needs: [deploy, version-bump]
  #   if: always() && github.ref == 'refs/heads/master'
  #   steps:
  #     - name: Notification
  #       run: |
  #         if [ "${{ needs.deploy.result }}" == "success" ]; then
  #           echo "‚úÖ Deployment successful!"
  #           if [ "${{ needs.version-bump.outputs.version_bumped }}" == "true" ]; then
  #             echo "üéâ Version bumped to ${{ needs.version-bump.outputs.new_version }}"
  #           fi
  #         else
  #           echo "‚ùå Deployment failed!"
  #         fi
