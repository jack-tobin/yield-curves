name: CI/CD Pipeline

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.10

      - name: Install dependencies
        run: |
          uv sync --locked --no-dev
          uv add --dev ruff

      - name: Run ruff linter
        run: |
          uv run ruff check .

      - name: Run ruff formatter check
        run: |
          uv run ruff format --check .

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: validate
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/image.tar

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: yield-curves
          path: /tmp/image.tar
          retention-days: 1

  test:
    name: Test Built Image
    runs-on: ubuntu-latest
    needs: build
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: django_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: yield-curves
          path: /tmp

      - name: Load Docker image
        run: |
          docker load --input /tmp/image.tar

      - name: Run pytest in container
        run: |
          # Get the image tag from the build job
          IMAGE_TAG=$(echo '${{ needs.build.outputs.image-tag }}' | head -n1)

          # Run tests using the built Docker image with existing test configuration
          # Override the entrypoint completely and use environment variables for database config
          docker run --rm \
            --entrypoint="" \
            --network host \
            -e CONFIG_PATH=settings/test/conf.yml \
            $IMAGE_TAG \
            uv run pytest tests/ -v --ignore=tests/apps/

      - name: Run Django tests in container
        run: |
          IMAGE_TAG=$(echo '${{ needs.build.outputs.image-tag }}' | head -n1)

          docker run --rm \
            --entrypoint="" \
            --network host \
            -e CONFIG_PATH=settings/test/conf.yml \
            $IMAGE_TAG \
            python -m src.manage test tests/apps/ --verbosity=2
